// ======================================================================
// File: functions/src/getDailyWorkByDate.ts
// ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô: 2025-10-13 (Task 20 - FIXED)
// ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° dailyStatus
// Region: asia-southeast1
// 
// üîß ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:
//   - ‡πÅ‡∏Å‡πâ query ‡∏à‡∏≤‡∏Å startDate ‚Üí work.from (‡πÄ‡∏û‡∏£‡∏≤‡∏∞ Firestore ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ü‡∏¥‡∏•‡∏î‡πå startDate)
//   - ‡πÅ‡∏õ‡∏•‡∏á work.from ‡∏à‡∏≤‡∏Å "2025-10-13T14:16" ‚Üí "2025-10-13" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ß‡∏±‡∏ô
//   - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö status ‡∏ó‡∏±‡πâ‡∏á "approved" ‡πÅ‡∏•‡∏∞ "‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥"
//   - ‡πÄ‡∏û‡∏¥‡πà‡∏° error handling ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô
// ======================================================================

import { onRequest } from "firebase-functions/v2/https";
import { getApps, initializeApp } from "firebase-admin/app";
import { getFirestore } from "firebase-admin/firestore";
import { getAuth } from "firebase-admin/auth";

if (!getApps().length) initializeApp();
const db = getFirestore();

const REGION = "asia-southeast1";

// ==================== CORS Middleware ====================
function setCORS(res: any) {
  res.set("Access-Control-Allow-Origin", "*");
  res.set("Access-Control-Allow-Methods", "GET, POST, OPTIONS");
  res.set("Access-Control-Allow-Headers", "Content-Type, Authorization");
}

// ==================== ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå ====================
async function checkPermissions(req: any): Promise<{
  ok: boolean;
  error?: string;
  uid?: string;
  email?: string;
}> {
  const authHeader = req.get("Authorization") || "";
  const match = authHeader.match(/^Bearer\s+(.+)$/i);
  
  if (!match) {
    return { ok: false, error: "missing_token" };
  }

  try {
    const token = match[1];
    const decoded = await getAuth().verifyIdToken(token);
    const email = decoded.email?.toLowerCase();
    
    if (!email) {
      return { ok: false, error: "invalid_email" };
    }

    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå viewTodayWork ‡∏´‡∏£‡∏∑‡∏≠ viewOtherDaysWork
    const adminDoc = await db.collection("admins").doc(email).get();
    
    if (!adminDoc.exists) {
      return { ok: false, error: "not_admin" };
    }

    const adminData = adminDoc.data();
    const permissions = adminData?.permissions || {};
    
    if (!permissions.viewTodayWork && !permissions.viewOtherDaysWork) {
      return { ok: false, error: "insufficient_permissions" };
    }

    return { ok: true, uid: decoded.uid, email };
  } catch (e: any) {
    console.error("[checkPermissions] Error:", e);
    return { ok: false, error: "invalid_token" };
  }
}

// ==================== Helper: ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ====================
/**
 * ‡πÅ‡∏õ‡∏•‡∏á datetime string ‡πÄ‡∏õ‡πá‡∏ô date string
 * "2025-10-13T14:16" ‚Üí "2025-10-13"
 */
function extractDate(datetimeStr: string): string {
  if (!datetimeStr) return "";
  
  // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô ISO format ‡∏ó‡∏µ‡πà‡∏°‡∏µ T
  if (datetimeStr.includes("T")) {
    return datetimeStr.split("T")[0];
  }
  
  // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô format ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏•‡∏≠‡∏á‡πÅ‡∏¢‡∏Å‡∏î‡πâ‡∏ß‡∏¢ space
  if (datetimeStr.includes(" ")) {
    return datetimeStr.split(" ")[0];
  }
  
  // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô YYYY-MM-DD ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
  return datetimeStr;
}

// ==================== Main Function ====================
export const getDailyWorkByDate = onRequest(
  { region: REGION },
  async (req, res) => {
    setCORS(res);

    // Handle OPTIONS (preflight)
    if (req.method === "OPTIONS") {
      res.status(204).send("");
      return;
    }

    // Accept POST only
    if (req.method !== "POST") {
      res.status(405).json({ ok: false, error: "method_not_allowed" });
      return;
    }

    try {
      // ========== ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå ==========
      const auth = await checkPermissions(req);
      if (!auth.ok) {
        res.status(403).json({ ok: false, error: auth.error });
        return;
      }

      // ========== ‡∏£‡∏±‡∏ö‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå ==========
      const { date } = req.body; // "2025-10-13"

      if (!date || typeof date !== "string") {
        res.status(400).json({ 
          ok: false, 
          error: "invalid_date",
          message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö YYYY-MM-DD" 
        });
        return;
      }

      // ========== ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏î‡∏π‡∏ß‡∏±‡∏ô‡∏≠‡∏∑‡πà‡∏ô ==========
      const adminDoc = await db.collection("admins").doc(auth.email!).get();
      const adminData = adminDoc.data();
      const canViewOtherDays = adminData?.permissions?.viewOtherDaysWork || false;

      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå viewOtherDaysWork ‡πÉ‡∏´‡πâ‡∏î‡∏π‡πÑ‡∏î‡πâ‡πÅ‡∏Ñ‡πà‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
      const today = new Date().toISOString().split("T")[0]; // "2025-10-13"
      if (!canViewOtherDays && date !== today) {
        res.status(403).json({ 
          ok: false, 
          error: "cannot_view_other_days",
          message: "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏î‡∏π‡∏á‡∏≤‡∏ô‡∏ß‡∏±‡∏ô‡∏≠‡∏∑‡πà‡∏ô" 
        });
        return;
      }

      // ========== Query ‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö status ‡∏ó‡∏±‡πâ‡∏á 2 ‡∏†‡∏≤‡∏©‡∏≤) ==========
      console.log(`[getDailyWorkByDate] Querying for date: ${date}`);
      
      // üîß Query ‡∏ó‡∏µ‡∏•‡∏∞ status (‡πÄ‡∏û‡∏£‡∏≤‡∏∞ Firestore ‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö OR ‡πÉ‡∏ô where)
      const approvedStatuses = ["approved", "‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥"];
      const allRequests: any[] = [];
      
      for (const status of approvedStatuses) {
        const snapshot = await db
          .collection("requests")
          .where("status", "==", status)
          .get();
        
        // Filter ‡∏î‡πâ‡∏ß‡∏¢ JavaScript ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ query nested field work.from ‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
        snapshot.forEach(doc => {
          const data = doc.data();
          const workFrom = data.work?.from || "";
          const workDate = extractDate(workFrom);
          
          // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÑ‡∏´‡∏°
          if (workDate === date) {
            allRequests.push({ id: doc.id, ...data });
          }
        });
      }

      console.log(`[getDailyWorkByDate] Found ${allRequests.length} requests for date ${date}`);

      if (allRequests.length === 0) {
        res.json({
          ok: true,
          date,
          scheduled: [],
          checkedIn: [],
          checkedOut: [],
          total: 0
        });
        return;
      }

      // ========== ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° dailyStatus ==========
      const scheduled: any[] = [];
      const checkedIn: any[] = [];
      const checkedOut: any[] = [];

      allRequests.forEach(doc => {
        const data = doc;
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á work object ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö response
        const work = {
          rid: data.requestId || doc.id,
          contractorName: data.requester?.fullname || data.requester?.company || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
          permitType: data.work?.type || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
          area: `${data.work?.floor || "N/A"} / ${data.work?.area || "N/A"}`,
          startTime: extractTime(data.work?.from || ""),
          endTime: extractTime(data.work?.to || ""),
          dailyStatus: data.dailyStatus || "scheduled",
          lastCheckIn: data.lastCheckIn || null,
          lastCheckOut: data.lastCheckOut || null,
        };

        // ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° dailyStatus
        switch (data.dailyStatus) {
          case "checked-in":
            checkedIn.push(work);
            break;
          case "checked-out":
            checkedOut.push(work);
            break;
          default:
            scheduled.push(work);
        }
      });

      // ========== Return ==========
      res.json({
        ok: true,
        date,
        scheduled,
        checkedIn,
        checkedOut,
        total: scheduled.length + checkedIn.length + checkedOut.length
      });

    } catch (e: any) {
      console.error("[getDailyWorkByDate] Error:", e);
      res.status(500).json({ 
        ok: false, 
        error: "internal_error",
        message: e?.message || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î" 
      });
    }
  }
);

// ==================== Helper: ‡πÅ‡∏¢‡∏Å‡πÄ‡∏ß‡∏•‡∏≤ ====================
/**
 * ‡πÅ‡∏¢‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å datetime string
 * "2025-10-13T14:16" ‚Üí "14:16"
 */
function extractTime(datetimeStr: string): string {
  if (!datetimeStr) return "N/A";
  
  // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ T ‡πÉ‡∏´‡πâ‡πÅ‡∏¢‡∏Å‡πÄ‡∏≠‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏á T
  if (datetimeStr.includes("T")) {
    const parts = datetimeStr.split("T");
    if (parts.length > 1) {
      return parts[1].substring(0, 5); // "14:16"
    }
  }
  
  // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ space ‡πÉ‡∏´‡πâ‡πÅ‡∏¢‡∏Å‡πÄ‡∏≠‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏á space
  if (datetimeStr.includes(" ")) {
    const parts = datetimeStr.split(" ");
    if (parts.length > 1) {
      return parts[1].substring(0, 5);
    }
  }
  
  return "N/A";
}