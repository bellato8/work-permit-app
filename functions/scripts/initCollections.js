// ======================================================================
// File: functions/scripts/initCollections.js
// Task 11: Initialize checkIns & checkOuts Collections
// ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ: node functions/scripts/initCollections.js
// ======================================================================

const admin = require("firebase-admin");

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ service account key ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
let serviceAccount;
try {
  serviceAccount = require("../service-account-key.json");
} catch (error) {
  console.log("‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå service-account-key.json");
  console.log("üí° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å Firebase Console ‚Üí Project Settings ‚Üí Service Accounts");
  console.log("üí° ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ GOOGLE_APPLICATION_CREDENTIALS environment variable");
  process.exit(1);
}

// Initialize Firebase Admin
admin.initializeApp({
  credential: admin.credential.cert(serviceAccount)
});

const db = admin.firestore();

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á Collections ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
 */
async function initCollections() {
  console.log("\nüîß ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á Collections...\n");

  try {
    // ===== 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á checkIns collection =====
    console.log("üìù ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á checkIns collection...");
    
    const checkInRef = db.collection("checkIns").doc("_init");
    await checkInRef.set({
      requestId: "_example",
      checkedInAt: admin.firestore.FieldValue.serverTimestamp(),
      checkedInBy: {
        uid: "_system",
        email: "system@example.com",
        name: "System Init"
      },
      notes: "This is an example document for initialization. You can delete this.",
      status: "checked-in",
      createdAt: admin.firestore.FieldValue.serverTimestamp(),
      updatedAt: admin.firestore.FieldValue.serverTimestamp()
    });
    
    console.log("‚úÖ checkIns collection ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß (document ID: _init)");

    // ===== 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á checkOuts collection =====
    console.log("üìù ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á checkOuts collection...");
    
    const checkOutRef = db.collection("checkOuts").doc("_init");
    await checkOutRef.set({
      requestId: "_example",
      checkInId: "_init",
      checkedOutAt: admin.firestore.FieldValue.serverTimestamp(),
      checkedOutBy: {
        uid: "_system",
        email: "system@example.com",
        name: "System Init"
      },
      notes: "This is an example document for initialization. You can delete this.",
      status: "checked-out",
      createdAt: admin.firestore.FieldValue.serverTimestamp(),
      updatedAt: admin.firestore.FieldValue.serverTimestamp()
    });
    
    console.log("‚úÖ checkOuts collection ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß (document ID: _init)");

    // ===== ‡∏™‡∏£‡∏∏‡∏õ =====
    console.log("\nüéâ ‡∏™‡∏£‡πâ‡∏≤‡∏á Collections ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n");
    console.log("üìã ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏ï‡πà‡∏≠:");
    console.log("   1. ‡πÄ‡∏õ‡∏¥‡∏î Firebase Console ‚Üí Firestore Database");
    console.log("   2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ collections: checkIns ‡πÅ‡∏•‡∏∞ checkOuts");
    console.log("   3. ‡∏™‡∏£‡πâ‡∏≤‡∏á Indexes (‡∏î‡∏π‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á)");
    console.log("   4. ‡∏•‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ _init ‡πÑ‡∏î‡πâ (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)\n");
    
    console.log("üìä Indexes ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á:");
    console.log("   Collection: checkIns");
    console.log("   - requestId (Ascending)");
    console.log("   - checkedInAt (Descending)");
    console.log("   - status (Ascending)\n");
    
    console.log("   Collection: checkOuts");
    console.log("   - requestId (Ascending)");
    console.log("   - checkedOutAt (Descending)");
    console.log("   - status (Ascending)\n");
    
    console.log("üîó ‡∏™‡∏£‡πâ‡∏≤‡∏á Indexes ‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà:");
    console.log("   https://console.firebase.google.com/project/work-permit-app-1e9f0/firestore/indexes\n");

  } catch (error) {
    console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error);
    process.exit(1);
  }

  process.exit(0);
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
initCollections();