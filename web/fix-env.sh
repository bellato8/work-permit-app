#!/bin/bash

# üöÄ Work Permit App - Environment Deployment Script
# ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö deploy ‡πÑ‡∏õ‡∏¢‡∏±‡∏á environment ‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á

set -e  # Exit on any error

# ‡∏™‡∏µ Terminal
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö print ‡∏™‡∏µ
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö environment parameter
ENVIRONMENT=$1

if [ -z "$ENVIRONMENT" ]; then
    print_error "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ environment: development ‡∏´‡∏£‡∏∑‡∏≠ production"
    echo "Usage: $0 {development|production}"
    exit 1
fi

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ variables ‡∏ï‡∏≤‡∏° environment
case $ENVIRONMENT in
    "development"|"dev")
        ENVIRONMENT="development"
        PROJECT_ID="work-permit-app-dev"
        FIREBASE_PROJECT="development"
        ENV_FILE=".env.development"
        EXPECTED_API_ID="uwuxgoi2fa"
        SITE_URL="https://work-permit-app-dev.web.app"
        ;;
    "production"|"prod")
        ENVIRONMENT="production"
        PROJECT_ID="work-permit-app-1e9f0"
        FIREBASE_PROJECT="work-permit-app-1e9f0"
        ENV_FILE=".env.production"
        EXPECTED_API_ID="aa5gfxjdmq"
        SITE_URL="https://imperialworld.asia"
        ;;
    *)
        print_error "Environment ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: $ENVIRONMENT"
        echo "‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞: development ‡∏´‡∏£‡∏∑‡∏≠ production"
        exit 1
        ;;
esac

print_status "üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏° deployment ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö environment: $ENVIRONMENT"
print_status "üìã Project ID: $PROJECT_ID"
print_status "üîó Site URL: $SITE_URL"

# ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á web directory
cd web

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ env file ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
if [ ! -f "$ENV_FILE" ]; then
    print_error "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå $ENV_FILE"
    exit 1
fi

print_success "‚úÖ ‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå $ENV_FILE"

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ API URLs ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
print_status "üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API configuration..."

API_ID_COUNT=$(grep -c "$EXPECTED_API_ID" "$ENV_FILE" || true)
if [ "$API_ID_COUNT" -eq 0 ]; then
    print_error "API URLs ‡πÉ‡∏ô $ENV_FILE ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"
    print_error "‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á API ID: $EXPECTED_API_ID"
    
    # ‡πÅ‡∏™‡∏î‡∏á API URLs ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    print_warning "API URLs ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:"
    grep "VITE_.*_URL=" "$ENV_FILE" | head -3
    
    # ‡πÄ‡∏™‡∏ô‡∏≠‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    read -p "‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç API URLs ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        print_status "üîß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç API URLs..."
        
        # ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°
        cp "$ENV_FILE" "${ENV_FILE}.backup.$(date +%Y%m%d_%H%M%S)"
        
        if [ "$ENVIRONMENT" = "development" ]; then
            # ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà production URLs ‡∏î‡πâ‡∏ß‡∏¢ development URLs
            sed -i 's/aa5gfxjdmq/uwuxgoi2fa/g' "$ENV_FILE"
        else
            # ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà development URLs ‡∏î‡πâ‡∏ß‡∏¢ production URLs  
            sed -i 's/uwuxgoi2fa/aa5gfxjdmq/g' "$ENV_FILE"
        fi
        
        print_success "‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç API URLs ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢"
    else
        print_error "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç $ENV_FILE ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô deploy"
        exit 1
    fi
fi

print_success "‚úÖ API configuration ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ($API_ID_COUNT URLs)"

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Firebase project
print_status "üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Firebase project configuration..."

PROJECT_IN_ENV=$(grep "VITE_FIREBASE_PROJECT_ID=" "$ENV_FILE" | cut -d'"' -f2)
if [ "$PROJECT_IN_ENV" != "$PROJECT_ID" ]; then
    print_error "Firebase Project ID ‡πÉ‡∏ô $ENV_FILE ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö environment"
    print_error "‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á: $PROJECT_ID, ‡∏û‡∏ö: $PROJECT_IN_ENV"
    exit 1
fi

print_success "‚úÖ Firebase project configuration ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"

# Build application
print_status "üî® Building application ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö $ENVIRONMENT..."

export NODE_ENV=$ENVIRONMENT
npm run build

if [ $? -ne 0 ]; then
    print_error "Build failed"
    exit 1
fi

print_success "‚úÖ Build ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"

# ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á root directory ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Firebase deploy
cd ..

# Deploy to Firebase
print_status "üöÄ Deploying to Firebase ($FIREBASE_PROJECT)..."

firebase deploy --project "$FIREBASE_PROJECT"

if [ $? -ne 0 ]; then
    print_error "Firebase deployment failed"
    exit 1
fi

print_success "üéâ Deployment ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!"
print_status "üîó Site URL: $SITE_URL"

# ‡∏ó‡∏î‡∏™‡∏≠‡∏ö connection
print_status "üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö site connectivity..."

HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$SITE_URL" || echo "000")

if [ "$HTTP_STATUS" = "200" ]; then
    print_success "‚úÖ Site ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (HTTP $HTTP_STATUS)"
else
    print_warning "‚ö†Ô∏è Site response: HTTP $HTTP_STATUS"
fi

# ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ
echo
echo "üìä === ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£ Deploy ==="
echo "Environment: $ENVIRONMENT"
echo "Project ID: $PROJECT_ID"
echo "Site URL: $SITE_URL"
echo "API ID: $EXPECTED_API_ID"
echo "Deploy Time: $(date)"
echo

print_success "üéØ Deployment ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå!"