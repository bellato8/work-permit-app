#!/usr/bin/env node

/**
 * üîß Debug & Fix Development Environment
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ environment configuration
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üîç === Debug Development Environment ===\n');

// 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö .env.development
console.log('üìÅ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö .env.development:');
try {
    const envContent = fs.readFileSync('.env.development', 'utf8');
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API URLs
    const apiUrls = envContent.match(/VITE_.*_URL="([^"]+)"/g);
    if (apiUrls) {
        console.log('üîó API URLs ‡πÉ‡∏ô .env.development:');
        apiUrls.slice(0, 5).forEach(url => {
            const isProduction = url.includes('aa5gfxjdmq');
            const isDevelopment = url.includes('uwuxgoi2fa');
            const status = isProduction ? '‚ùå PRODUCTION' : isDevelopment ? '‚úÖ DEVELOPMENT' : '‚ùì UNKNOWN';
            console.log(`   ${status}: ${url}`);
        });
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Firebase Project
    const projectMatch = envContent.match(/VITE_FIREBASE_PROJECT_ID="([^"]+)"/);
    if (projectMatch) {
        const projectId = projectMatch[1];
        const status = projectId === 'work-permit-app-dev' ? '‚úÖ' : '‚ùå';
        console.log(`\nüî• Firebase Project: ${status} ${projectId}`);
    }
    
} catch (error) {
    console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå .env.development');
}

// 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö dist directory
console.log('\nüì¶ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Build Output:');
const distPath = 'dist';
if (fs.existsSync(distPath)) {
    const stats = fs.statSync(distPath);
    console.log(`‚úÖ ‡∏û‡∏ö dist directory (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ${stats.mtime.toLocaleString()})`);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö built files
    const indexPath = path.join(distPath, 'index.html');
    if (fs.existsSync(indexPath)) {
        const indexContent = fs.readFileSync(indexPath, 'utf8');
        if (indexContent.includes('aa5gfxjdmq')) {
            console.log('‚ùå Built files ‡∏¢‡∏±‡∏á‡∏°‡∏µ Production URLs!');
        } else if (indexContent.includes('uwuxgoi2fa')) {
            console.log('‚úÖ Built files ‡πÉ‡∏ä‡πâ Development URLs');
        } else {
            console.log('‚ùì ‡πÑ‡∏°‡πà‡∏û‡∏ö API URLs ‡πÉ‡∏ô built files');
        }
    }
} else {
    console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö dist directory');
}

// 3. ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
console.log('\nüõ†Ô∏è === ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ===');

console.log('\nüîÑ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:');
console.log('1. ‡∏•‡∏ö cache ‡πÅ‡∏•‡∏∞ rebuild:');
console.log('   npm run clean-build');
console.log('');
console.log('2. Force rebuild ‡πÅ‡∏ö‡∏ö development:');
console.log('   set NODE_ENV=development && npm run build');
console.log('');
console.log('3. Deploy ‡πÉ‡∏´‡∏°‡πà:');
console.log('   firebase deploy --project development');
console.log('');
console.log('4. Clear browser cache:');
console.log('   Ctrl+Shift+R ‡∏´‡∏£‡∏∑‡∏≠ Ctrl+F5');

// 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á clean-build script
console.log('\nüìù ‡∏™‡∏£‡πâ‡∏≤‡∏á clean-build script...');
const packageJsonPath = 'package.json';
if (fs.existsSync(packageJsonPath)) {
    try {
        const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
        
        if (!packageJson.scripts['clean-build']) {
            packageJson.scripts['clean-build'] = 'rm -rf dist node_modules/.vite && npm run build';
            fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2));
            console.log('‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° clean-build script ‡πÉ‡∏ô package.json');
        }
    } catch (error) {
        console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç package.json');
    }
}

console.log('\nüéØ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö CORS ‡∏ö‡∏ô localhost:');
console.log('   ‡πÉ‡∏ä‡πâ dev site ‡πÅ‡∏ó‡∏ô: https://work-permit-app-dev.web.app');
console.log('   ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ proxy ‡πÉ‡∏ô vite.config.js');
