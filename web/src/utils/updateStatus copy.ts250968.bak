// ============================================================
// ไฟล์: web/src/utils/updateStatus.ts
// ผู้เขียน: Sutthirak.w (ปรับให้ยิงได้ทั้ง DecisionPortal + Cloud Functions)
// เวอร์ชัน: 2025-09-20 (แก้ไข: เพิ่มการแปลง error เป็นภาษาไทย)
// หน้าที่: เรียก "อนุมัติ/ไม่อนุมัติ" ให้ทำงานได้กับหลาย backend ที่มีอยู่
// ============================================================

import { getAuth } from "firebase/auth";

type UpdatePayload = {
  rid: string;
  status: "approved" | "rejected";
  reason?: string;
};

/**
 * แปลงข้อความ error จาก server เป็นภาษาไทยที่อ่านเข้าใจง่าย
 * @param status - HTTP status code
 * @param rawText - ข้อความดิบจาก server
 * @returns ข้อความภาษาไทยที่เข้าใจง่าย
 */
function toFriendlyMessage(status: number, rawText: string): string {
  const t = (rawText || "").toLowerCase();

  // เคสสิทธิ์ไม่พอ / ไม่มี capability
  if (status === 403 || t.includes("forbidden")) 
    return "คุณไม่มีสิทธิ์อนุมัติคำขอนี้";
  if (t.includes("missing_required_caps")) 
    return "บัญชีนี้ไม่มีสิทธิ์อนุมัติ/ไม่อนุมัติ";
  if (t.includes("not_approver"))
    return "คุณไม่ได้รับการแต่งตั้งเป็นผู้อนุมัติ";

  // เคสต้องล็อกอิน
  if (status === 401) 
    return "กรุณาเข้าสู่ระบบก่อนทำรายการ";
  if (t.includes("token expired"))
    return "เซสชันหมดอายุ กรุณาเข้าสู่ระบบใหม่";

  // เคสข้อมูลไม่ครบ/ไม่ถูกต้อง
  if (status === 400 && t.includes("missing rid")) 
    return "ขาดรหัสคำขอ (RID)";
  if (status === 400 && (t.includes("missing decision") || t.includes("status must be")))
    return "กรุณาเลือกผลการอนุมัติให้ถูกต้อง";
  if (status === 400 && t.includes("reason required"))
    return "กรุณาระบุเหตุผลในการไม่อนุมัติ";
  if (status === 400)
    return "ข้อมูลไม่ถูกต้อง กรุณาตรวจสอบและลองใหม่";

  // ไม่พบรายการ
  if (status === 404 || t.includes("not found")) 
    return "ไม่พบคำขอที่ต้องการ";
  if (t.includes("request_id_invalid"))
    return "รหัสคำขอไม่ถูกต้อง";

  // เคสที่อนุมัติ/ปฏิเสธไปแล้ว
  if (t.includes("already approved"))
    return "คำขอนี้ได้รับการอนุมัติไปแล้ว";
  if (t.includes("already rejected"))
    return "คำขอนี้ถูกปฏิเสธไปแล้ว";
  if (t.includes("already processed"))
    return "คำขอนี้ดำเนินการไปแล้ว";

  // เซิร์ฟเวอร์ล้มเหลว
  if (status === 503)
    return "ระบบไม่พร้อมให้บริการชั่วคราว";
  if (status >= 500) 
    return "ระบบขัดข้อง กรุณาลองใหม่อีกครั้ง";

  // timeout
  if (t.includes("timeout"))
    return "ใช้เวลานานเกินไป กรุณาลองใหม่";

  // ดีฟอลต์
  return `ไม่สามารถทำรายการได้ (รหัส ${status})`;
}

export async function updateStatusApi(payload: UpdatePayload) {
  const url = import.meta.env.VITE_UPDATE_STATUS_URL;
  if (!url) throw new Error("VITE_UPDATE_STATUS_URL is not set");

  const auth = getAuth();
  const user = auth.currentUser;
  if (!user) throw new Error("กรุณาเข้าสู่ระบบก่อนทำรายการ");

  // ดึง Firebase ID Token ของผู้ใช้ที่ล็อกอิน
  const idToken = await user.getIdToken(/* forceRefresh */ true);

  const res = await fetch(url, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      // สำคัญ: ส่ง ID Token ไปที่ฟังก์ชัน
      Authorization: `Bearer ${idToken}`,
      // บอกอีเมลผู้ขอ เพื่อให้ฟังก์ชัน log ได้สวยงาม
      "x-requester-email": user.email ?? "",
    },
    body: JSON.stringify(payload),
  });

  if (!res.ok) {
    const text = await res.text();
    
    // พยายามดึง message/error จาก JSON ถ้ามี
    let serverMsg = text;
    try {
      const j = JSON.parse(text);
      serverMsg = String(j?.error ?? j?.message ?? text);
    } catch {
      /* ignore non-JSON - ใช้ text ดิบต่อไป */
    }
    
    // Log รายละเอียดสำหรับ debugging
    console.warn("[updateStatusApi] server error:", { 
      status: res.status, 
      serverMsg,
      payload 
    });
    
    // โยน Error พร้อมข้อความภาษาไทยที่เข้าใจง่าย
    throw new Error(toFriendlyMessage(res.status, serverMsg));
  }

  // ฟังก์ชันของคุณคืน "ok data" หรือ JSON; พยายาม parse ถ้าเป็น JSON
  try {
    return await res.json();
  } catch {
    return await res.text();
  }
}