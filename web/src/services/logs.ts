// ======================================================================
// File: web/src/services/logs.ts  (Adapter ‚Üí ‡πÉ‡∏ä‡πâ‡∏Ç‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô web/src/lib/logs.ts)
// ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô: 06/10/2025
// ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà: ‡∏Ñ‡∏á API ‡πÄ‡∏î‡∏¥‡∏° (fetchLogs, logAuth) ‡πÅ‡∏ï‡πà‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å lib/logs.ts (ID Token, ‡∏£‡∏µ‡∏ó‡∏£‡∏≤‡∏¢ 401)
// ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ x-api-key ‡∏≠‡∏µ‡∏Å‡∏ï‡πà‡∏≠‡πÑ‡∏õ
// ======================================================================

/** ‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏ö‡∏ö Firestore (seconds + nanoseconds) */
export type FirestoreTs = {
  seconds?: number; nanoseconds?: number;
  _seconds?: number; _nanoseconds?: number;
};

/** ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Log ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ (‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏ß‡πâ‡∏≤‡∏á) */
export type AuditLog = {
  id?: string;
  at?: FirestoreTs | string | number | Date;
  atMillis?: number;
  by?: { email?: string; name?: string; uid?: string; role?: string; ip?: string } | string | null;
  action?: string;
  target?: any;
  note?: string;
  ip?: string;
  ua?: string;
  method?: string;
  raw?: any;
  // ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏£‡∏∏‡πà‡∏ô‡πÄ‡∏Å‡πà‡∏≤ (‡∏™‡∏≥‡∏£‡∏≠‡∏á)
  email?: string;
  adminEmail?: string;
  [k: string]: any;
};

// üëâ ‡πÉ‡∏ä‡πâ‡∏Ç‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å lib/logs.ts (‡πÅ‡∏ô‡∏ö ID Token + ‡∏£‡∏µ‡∏ó‡∏£‡∏≤‡∏¢‡πÄ‡∏°‡∏∑‡πà‡∏≠ 401)
import { listLogs as _listLogs, logAuth as _logAuth, getRequesterEmail } from "../lib/logs";

/** ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Logs (‡∏Ñ‡∏á‡∏ã‡∏¥‡∏Å‡πÄ‡∏ô‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏¥‡∏°) */
export async function fetchLogs(opts: {
  requester?: string;   // ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å (‡∏à‡∏∞‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡πÉ‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
  q?: string;
  action?: string;
  from?: string;        // ISO
  to?: string;          // ISO
  limit?: number;       // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô 300
} = {}): Promise<AuditLog[]> {
  const {
    requester = getRequesterEmail(),
    q, action, from, to, limit = 300,
  } = opts;

  const items = await _listLogs({
    q, action, from, to, limit,
    orderBy: "at",
    orderDir: "desc",
  });

  // ‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠ requester ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡∏¥‡∏° (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)
  return items.map((x: any) => ({ ...x, requester }));
}

/** ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Log ‡∏ï‡∏≠‡∏ô login/logout/manual (‡∏Ñ‡∏á‡∏ã‡∏¥‡∏Å‡πÄ‡∏ô‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏¥‡∏°) */
export async function logAuth(payload: {
  action: "login" | "logout" | "manual";
  requester: string;  // ‡∏Ñ‡∏ô‡∏Å‡∏î‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô ‡πÅ‡∏Ñ‡πà‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
  email: string;      // ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
  name?: string;
  rid?: string;
  ip?: string;        // ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô: ‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏≤‡∏Å X-Forwarded-For ‡πÄ‡∏≠‡∏á
  note?: string;
}): Promise<boolean> {
  await _logAuth({
    action: payload.action,
    email: payload.email,
    name: payload.name,
    rid: payload.rid,
    note: payload.note,
  });
  return true;
}
