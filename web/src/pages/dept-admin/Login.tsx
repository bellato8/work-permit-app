//======================================================================
// File: web/src/pages/dept-admin/Login.tsx
// ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà: ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡πÅ‡∏ú‡∏ô‡∏Å (Department Admin)
// ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° auth ‡∏ú‡πà‡∏≤‡∏ô Firebase Auth (signInWithEmailAndPassword)
// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠: 30/10/2025
// ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:
//   - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏õ‡πá‡∏ô deptAdmin ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å login
//   - Redirect ‡πÑ‡∏õ‡∏¢‡∏±‡∏á /dept-admin/dashboard
//======================================================================
import React, { useCallback, useEffect, useMemo, useState } from "react";
import { useLocation, useNavigate } from "react-router-dom";
import {
  getAuth,
  onAuthStateChanged,
  signInWithEmailAndPassword,
  setPersistence,
  browserLocalPersistence,
  browserSessionPersistence,
} from "firebase/auth";
import { doc, getDoc, getFirestore } from "firebase/firestore";

const wrap: React.CSSProperties = {
  minHeight: "100dvh",
  display: "grid",
  placeItems: "center",
  background: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
  fontFamily: "Sarabun, sans-serif",
};

const card: React.CSSProperties = {
  width: "100%",
  maxWidth: 420,
  background: "#fff",
  border: "1px solid #e5e7eb",
  borderRadius: 16,
  padding: 32,
  boxShadow: "0 20px 40px rgba(0,0,0,0.15)",
};

const header: React.CSSProperties = {
  textAlign: "center",
  marginBottom: 24,
};

const icon: React.CSSProperties = {
  fontSize: 48,
  marginBottom: 12,
};

const title: React.CSSProperties = {
  margin: 0,
  fontSize: 24,
  fontWeight: 800,
  color: "#111827",
};

const subtitle: React.CSSProperties = {
  marginTop: 8,
  marginBottom: 0,
  color: "#6b7280",
  fontSize: 14,
};

const labelCss: React.CSSProperties = {
  display: "block",
  fontSize: 14,
  marginBottom: 6,
  color: "#374151",
  fontWeight: 600,
};

const inputCss: React.CSSProperties = {
  width: "100%",
  padding: "12px 14px",
  border: "1px solid #d1d5db",
  borderRadius: 8,
  outline: "none",
  fontSize: 14,
  transition: "border-color 0.2s",
} as const;

const btn: React.CSSProperties = {
  display: "inline-flex",
  alignItems: "center",
  justifyContent: "center",
  width: "100%",
  padding: "12px 16px",
  borderRadius: 8,
  border: "none",
  background: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
  color: "#fff",
  fontWeight: 700,
  fontSize: 16,
  cursor: "pointer",
  transition: "transform 0.2s, box-shadow 0.2s",
};

const danger: React.CSSProperties = {
  background: "#fee2e2",
  color: "#991b1b",
  border: "1px solid #fecaca",
  padding: "12px 14px",
  borderRadius: 8,
  fontSize: 14,
};

const info: React.CSSProperties = {
  background: "#dbeafe",
  color: "#1e40af",
  border: "1px solid #bfdbfe",
  padding: "12px 14px",
  borderRadius: 8,
  fontSize: 13,
  marginTop: 16,
};

function mapAuthError(code?: string): string {
  switch (code) {
    case "auth/invalid-email":
      return "‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á";
    case "auth/user-disabled":
      return "‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô";
    case "auth/user-not-found":
      return "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ";
    case "auth/wrong-password":
    case "auth/invalid-credential":
      return "‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á";
    case "auth/too-many-requests":
      return "‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á";
    case "auth/network-request-failed":
      return "‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠";
    default:
      return "‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà";
  }
}

export default function DeptAdminLogin() {
  const navigate = useNavigate();
  const location = useLocation();
  const auth = getAuth();
  const db = getFirestore();

  const nextPath = useMemo(() => {
    try {
      const q = new URLSearchParams(location.search);
      return q.get("to") || "/dept-admin/dashboard";
    } catch {
      return "/dept-admin/dashboard";
    }
  }, [location.search]);

  const [email, setEmail] = useState("");
  const [pass, setPass] = useState("");
  const [remember, setRemember] = useState(true);
  const [busy, setBusy] = useState(false);
  const [err, setErr] = useState<string | null>(null);

  // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ session ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‚Üí ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡πà‡∏≠‡∏ô redirect
  useEffect(() => {
    const unsub = onAuthStateChanged(auth, async (user) => {
      if (user) {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô deptAdmin ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        try {
          const deptAdminRef = doc(db, "dept_admins", user.email || user.uid);
          const deptAdminSnap = await getDoc(deptAdminRef);

          if (deptAdminSnap.exists() && deptAdminSnap.data()?.enabled) {
            navigate(nextPath, { replace: true });
          } else {
            // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà dept admin
            await auth.signOut();
            setErr("‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡πÅ‡∏ú‡∏ô‡∏Å");
          }
        } catch (e) {
          console.error("Error checking dept admin:", e);
        }
      }
    });
    return () => unsub();
  }, [auth, db, navigate, nextPath]);

  const onSubmit = useCallback(
    async (e: React.FormEvent) => {
      e.preventDefault();
      if (busy) return;

      setErr(null);

      const emailTrim = email.trim().toLowerCase();
      const passTrim = pass;

      if (!emailTrim) {
        setErr("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏µ‡πÄ‡∏°‡∏•");
        return;
      }

      const emailOk = /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(emailTrim);
      if (!emailOk) {
        setErr("‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
        return;
      }
      if (!passTrim) {
        setErr("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô");
        return;
      }

      setBusy(true);
      try {
        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏Ñ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
        await setPersistence(
          auth,
          remember ? browserLocalPersistence : browserSessionPersistence
        );

        const userCred = await signInWithEmailAndPassword(auth, emailTrim, passTrim);

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô dept admin ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const deptAdminRef = doc(db, "dept_admins", emailTrim);
        const deptAdminSnap = await getDoc(deptAdminRef);

        if (!deptAdminSnap.exists()) {
          await auth.signOut();
          setErr("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡πÅ‡∏ú‡∏ô‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö");
          setBusy(false);
          return;
        }

        const deptAdminData = deptAdminSnap.data();
        if (!deptAdminData?.enabled) {
          await auth.signOut();
          setErr("‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö");
          setBusy(false);
          return;
        }

        // Success - redirect
        navigate(nextPath, { replace: true });
      } catch (e: any) {
        const msg = mapAuthError(e?.code);
        setErr(msg);
        setBusy(false);
      }
    },
    [auth, db, email, pass, remember, nextPath, navigate, busy]
  );

  return (
    <div style={wrap}>
      <div style={card}>
        <div style={header}>
          <div style={icon}>üë®‚Äçüíº</div>
          <h1 style={title}>‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡πÅ‡∏ú‡∏ô‡∏Å</h1>
          <p style={subtitle}>
            ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÅ‡∏•‡∏∞‡∏î‡∏π‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô‡∏Å
          </p>
        </div>

        {err ? <div style={{ ...danger, marginBottom: 16 }}>{err}</div> : null}

        <form onSubmit={onSubmit}>
          <div style={{ marginBottom: 16 }}>
            <label style={labelCss} htmlFor="email">
              ‡∏≠‡∏µ‡πÄ‡∏°‡∏•
            </label>
            <input
              id="email"
              type="email"
              value={email}
              onChange={(e) => setEmail(e.currentTarget.value)}
              placeholder="manager@company.com"
              style={inputCss}
              autoComplete="username"
              disabled={busy}
              required
            />
          </div>

          <div style={{ marginBottom: 16 }}>
            <label style={labelCss} htmlFor="password">
              ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
            </label>
            <input
              id="password"
              type="password"
              value={pass}
              onChange={(e) => setPass(e.currentTarget.value)}
              placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
              style={inputCss}
              autoComplete="current-password"
              disabled={busy}
              required
            />
          </div>

          <div
            style={{
              display: "flex",
              alignItems: "center",
              marginBottom: 20,
            }}
          >
            <label style={{ display: "flex", alignItems: "center", gap: 8 }}>
              <input
                type="checkbox"
                checked={remember}
                onChange={(e) => setRemember(e.currentTarget.checked)}
                disabled={busy}
              />
              <span style={{ fontSize: 14 }}>‡∏à‡∏≥‡∏â‡∏±‡∏ô‡πÑ‡∏ß‡πâ</span>
            </label>
          </div>

          <button
            type="submit"
            style={btn}
            disabled={busy}
            onMouseEnter={(e) => {
              if (!busy) {
                e.currentTarget.style.transform = "translateY(-2px)";
                e.currentTarget.style.boxShadow = "0 10px 20px rgba(102, 126, 234, 0.4)";
              }
            }}
            onMouseLeave={(e) => {
              e.currentTarget.style.transform = "translateY(0)";
              e.currentTarget.style.boxShadow = "none";
            }}
          >
            {busy ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö..." : "‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö"}
          </button>
        </form>

        <div style={info}>
          <strong>üí° ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:</strong> ‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡πÅ‡∏ú‡∏ô‡∏Å‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
          <br />
          ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡πÅ‡∏ú‡∏ô‡∏Å ‡πÅ‡∏•‡∏∞‡∏î‡∏π‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ú‡∏ô‡∏Å‡∏™‡πà‡∏á‡πÑ‡∏õ
        </div>
      </div>
    </div>
  );
}
