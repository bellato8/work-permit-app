// ======================================================================
// File: web/src/pages/admin/DailyOperations.tsx
// ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà: ‡∏´‡∏ô‡πâ‡∏≤ "‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô" ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•
// ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á: ‡∏™‡∏•‡∏±‡∏ö‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô <-> ‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô + ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ß‡∏±‡∏ô + ‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå‡∏•‡∏π‡∏Å
// ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:
//  - ‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô/‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏≠‡∏≤‡∏ó‡πå‡∏à‡∏£‡∏¥‡∏á ‡∏ó‡∏≥‡∏ó‡∏µ‡πà DailyView (‡πÑ‡∏ü‡∏•‡πå‡∏•‡∏π‡∏Å) ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡πÅ‡∏à‡πâ‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô onCheckIn/onCheckOut
//    ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏ó‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà "‡∏£‡∏±‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏´‡∏•‡∏±‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" (post-success hook) ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô
//  - ‡∏ñ‡πâ‡∏≤‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log ‡∏ù‡∏±‡πà‡∏á‡∏à‡∏≠‡∏´‡∏•‡∏±‡∏Å ‡πÄ‡∏ä‡πà‡∏ô toast ‡∏£‡∏ß‡∏°/‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤ ‡∏Ñ‡πà‡∏≠‡∏¢‡∏°‡∏≤‡∏ó‡∏≥‡πÉ‡∏ô handler ‡∏ô‡∏µ‡πâ
// ‡∏ú‡∏π‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô A4 - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ó‡∏µ‡∏°‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡πÇ‡∏Ñ‡πâ‡∏î)
// ======================================================================

import { useState } from "react";
import {
  Box,
  Typography,
  ToggleButtonGroup,
  ToggleButton,
  IconButton,
} from "@mui/material";
import CalendarTodayIcon from "@mui/icons-material/CalendarToday";
import ViewListIcon from "@mui/icons-material/ViewList";
import ArrowBackIosNewIcon from "@mui/icons-material/ArrowBackIosNew";
import ArrowForwardIosIcon from "@mui/icons-material/ArrowForwardIos";
import TodayIcon from "@mui/icons-material/Today";

// ‚òÖ ‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå‡∏•‡∏π‡∏Å 2 ‡πÅ‡∏ö‡∏ö: ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô / ‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô
import DailyView from "../../components/DailyView";
import CalendarView from "../../components/CalendarView";

// ‚òÖ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á
import type { ViewMode } from "../../types/dailywork.types";

export default function DailyOperations() {
  // ‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: "daily" ‡∏´‡∏£‡∏∑‡∏≠ "calendar"
  const [viewMode, setViewMode] = useState<ViewMode>("daily");
  // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏π (‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô)
  const [selectedDate, setSelectedDate] = useState(new Date());

  // ---------------- ‡∏ï‡∏±‡∏ß‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ß‡∏±‡∏ô (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÇ‡∏´‡∏°‡∏î‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô) ----------------
  const handlePrevDay = () => {
    const prev = new Date(selectedDate);
    prev.setDate(prev.getDate() - 1);
    setSelectedDate(prev);
  };

  const handleNextDay = () => {
    const next = new Date(selectedDate);
    next.setDate(next.getDate() + 1);
    setSelectedDate(next);
  };

  const handleToday = () => {
    setSelectedDate(new Date());
  };

  // ---------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢ ----------------
  const formatDate = (date: Date) => {
    return date.toLocaleDateString("th-TH", {
      year: "numeric",
      month: "long",
      day: "numeric",
    });
  };

  // ---------------- ‡∏™‡∏•‡∏±‡∏ö‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• ----------------
  const handleViewModeChange = (
    _: React.MouseEvent<HTMLElement>,
    newMode: ViewMode | null
  ) => {
    if (newMode !== null) {
      setViewMode(newMode);
    }
  };

  // ---------------- ‡∏Æ‡∏∏‡∏Å‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô/‡πÄ‡∏≠‡∏≤‡∏ó‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ----------------
  // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡πÄ‡∏ä‡πá‡∏Ñ‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ô DailyView ‡πÅ‡∏•‡πâ‡∏ß ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡∏¥‡∏° (‡πÄ‡∏ä‡πà‡∏ô toast / ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏™‡∏£‡∏∏‡∏õ)
  const handleCheckIn = (rid: string) => {
    console.log("‚úÖ Check In (post-success hook) @DailyOperations:", rid);
    // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡∏¥‡∏°‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï: refresh ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏£‡∏ß‡∏°, ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô, ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô log ‡πÄ‡∏û‡∏¥‡πà‡∏°
  };

  const handleCheckOut = (rid: string) => {
    console.log("üö™ Check Out (post-success hook) @DailyOperations:", rid);
    // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡∏¥‡∏°‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï: refresh ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏£‡∏ß‡∏°, ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô, ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô log ‡πÄ‡∏û‡∏¥‡πà‡∏°
  };

  // ---------------- ‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏•‡∏±‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÇ‡∏´‡∏°‡∏î‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô ----------------
  const handleDateClick = (date: Date) => {
    setSelectedDate(date);
    setViewMode("daily");
  };

  // ---------------- ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• ----------------
  return (
    <Box sx={{ p: 3 }}>
      {/* ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏û‡∏à */}
      <Box
        sx={{
          mb: 3,
          display: "flex",
          alignItems: "center",
          justifyContent: "space-between",
          flexWrap: "wrap",
          gap: 2,
        }}
      >
        <Typography variant="h4" sx={{ fontWeight: 600 }}>
          ‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô
        </Typography>

        {/* ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏•‡∏±‡∏ö‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• */}
        <ToggleButtonGroup
          value={viewMode}
          exclusive
          onChange={handleViewModeChange}
          size="small"
          aria-label="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•"
        >
          <ToggleButton value="daily" aria-label="‡πÇ‡∏´‡∏°‡∏î‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô">
            <ViewListIcon sx={{ mr: 1 }} />
            ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
          </ToggleButton>
          <ToggleButton value="calendar" aria-label="‡πÇ‡∏´‡∏°‡∏î‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô">
            <CalendarTodayIcon sx={{ mr: 1 }} />
            ‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô
          </ToggleButton>
        </ToggleButtonGroup>
      </Box>

      {/* ‡πÅ‡∏ñ‡∏ö‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ß‡∏±‡∏ô (‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÇ‡∏´‡∏°‡∏î‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô) */}
      {viewMode === "daily" && (
        <Box
          sx={{
            mb: 3,
            display: "flex",
            alignItems: "center",
            gap: 2,
            flexWrap: "wrap",
          }}
        >
          <IconButton onClick={handlePrevDay} size="small" aria-label="‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤">
            <ArrowBackIosNewIcon />
          </IconButton>

          <Typography
            variant="h6"
            sx={{
              minWidth: 200,
              textAlign: "center",
              fontWeight: 500,
            }}
          >
            üìÖ {formatDate(selectedDate)}
          </Typography>

          <IconButton onClick={handleNextDay} size="small" aria-label="‡∏ß‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ">
            <ArrowForwardIosIcon />
          </IconButton>

          <IconButton onClick={handleToday} size="small" color="primary" aria-label="‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ">
            <TodayIcon />
          </IconButton>
        </Box>
      )}

      {/* ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤: ‡∏™‡∏•‡∏±‡∏ö‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå‡∏•‡∏π‡∏Å‡∏ï‡∏≤‡∏°‡πÇ‡∏´‡∏°‡∏î */}
      <Box sx={{ mt: 3 }}>
        {viewMode === "daily" ? (
          <DailyView date={selectedDate} onCheckIn={handleCheckIn} onCheckOut={handleCheckOut} />
        ) : (
          <CalendarView onDateClick={handleDateClick} />
        )}
      </Box>
    </Box>
  );
}
