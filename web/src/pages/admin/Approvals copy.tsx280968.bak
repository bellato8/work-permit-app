// ======================================================================
// File: web/src/pages/admin/Approvals.tsx
// ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà: ‡∏´‡∏ô‡πâ‡∏≤ Approvals ‚Äî ‡∏î‡∏∂‡∏á‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏à‡∏≤‡∏Å proxy ‡πÅ‡∏•‡πâ‡∏ß "‡πÄ‡∏ï‡∏¥‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î" ‡∏ó‡∏µ‡∏•‡∏∞ RID
// ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô: 2025-09-23  (Asia/Bangkok)
// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏µ‡πâ:
//  - [Security/UI] ‡∏ã‡πà‡∏≠‡∏ô Debug Panel + ‡∏õ‡∏∏‡πà‡∏° Bug ‡πÉ‡∏´‡πâ "‡πÄ‡∏â‡∏û‡∏≤‡∏∞ superadmin" ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡πá‡∏ô/‡∏Å‡∏î‡πÑ‡∏î‡πâ
//  - ‡πÑ‡∏°‡πà‡∏Å‡∏£‡∏∞‡∏ó‡∏ö flow ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•, hydrate, export ‡πÄ‡∏î‡∏¥‡∏°
// ======================================================================

console.info("[Approvals TWO-PHASE] running");

import React, { useEffect, useMemo, useRef, useState } from "react";
import { Link } from "react-router-dom";
import {
  Paper, Box, Typography, TextField, InputAdornment, Chip,
  Table, TableBody, TableCell, TableContainer, TableHead, TableRow,
  IconButton, Tooltip, LinearProgress, Stack, Button,
  ToggleButton, ToggleButtonGroup, Divider, Badge, Alert
} from "@mui/material";
import SearchRoundedIcon from "@mui/icons-material/SearchRounded";
import OpenInNewRoundedIcon from "@mui/icons-material/OpenInNewRounded";
import BugReportIcon from "@mui/icons-material/BugReport";

// --- ‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡∏î‡πà‡∏≤‡∏ô‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏•‡∏≤‡∏á + ‡∏ï‡∏±‡∏ß‡∏´‡πà‡∏≠ UI ---
import useAuthzLive from "../../hooks/useAuthzLive";
import { hasCap, isSuperadmin } from "../../lib/hasCap";
import CapBlock from "../../components/CapBlock";
import CapButton from "../../components/CapButton";

// ---------- ‡πÉ‡∏ä‡πâ logic ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö Dashboard/Permits ----------
type PermitRow = {
  rid: string;
  requesterName?: string;
  company?: string;
  jobType?: string;
  status?: string;
  createdAt?: number | string;
  updatedAt?: number | string;
  approvedAt?: number | string;
  rejectedAt?: number | string;
};

// ---------- ENV / LocalStorage helpers ----------
const LIST_URL_ENV =
  (import.meta.env.VITE_LIST_REQUESTS_ADMIN_URL as string | undefined) ||
  (import.meta.env.VITE_LIST_REQUESTS_URL as string | undefined) ||
  "";

function getListUrl(): string {
  const fromLS = (localStorage.getItem("list_url") || "").trim();
  return fromLS || (LIST_URL_ENV || "").trim();
}

function getApproverKey(): string {
  const fromLS = (localStorage.getItem("approver_key") || "").trim();
  const fromEnv = (import.meta.env.VITE_APPROVER_KEY as string | undefined) || "";
  return fromLS || fromEnv.trim();
}

function getRequesterEmail(): string {
  const fromLS = (localStorage.getItem("admin_requester_email") || "").trim();
  const fromEnv = (import.meta.env.VITE_APPROVER_EMAIL as string | undefined) || "";
  return fromLS || fromEnv.trim();
}

const DETAILS_URL_ENV =
  (import.meta.env.VITE_GET_REQUEST_ADMIN_URL as string | undefined) || "";

function getDetailsUrl(): string {
  const fromLS = (localStorage.getItem("details_url") || "").trim();
  if (fromLS) return fromLS;
  if (DETAILS_URL_ENV) return DETAILS_URL_ENV.trim();
  const lu = getListUrl();
  try {
    if (lu.includes("listRequests")) return lu.replace("listRequests", "getRequestAdmin");
  } catch {}
  return "";
}

// ---------- Header + fallback query ----------
const buildHeaders = (apiKey: string, requester: string) => ({
  "Content-Type": "application/json",
  "x-api-key": apiKey,
  "x-requester-email": requester,
});

const withKeyQuery = (url: string, key: string, requester: string) => {
  try {
    const u = new URL(url);
    if (key) u.searchParams.set("key", key);
    if (requester) u.searchParams.set("requester", requester);
    return u.toString();
  } catch {
    return url;
  }
};

// ---------- Helper functions ----------
function tsToMillis(v: any): number | undefined {
  if (v === undefined || v === null) return undefined;

  if (typeof v === "number") {
    const abs = Math.abs(v);
    if (abs < 1e11) return v * 1000;          // seconds ‚Üí ms
    if (abs < 1e13) return v;                 // ms
    if (abs < 1e16) return Math.floor(v / 1e3); // microseconds ‚Üí ms
    return Math.floor(v / 1e6);               // nanoseconds ‚Üí ms
  }

  if (typeof v === "string") {
    const t = Date.parse(v);
    if (!Number.isNaN(t)) return t;
    const n = Number(v);
    if (Number.isFinite(n)) return tsToMillis(n);
    return undefined;
  }

  if (typeof v === "object") {
    if (typeof v._seconds === "number") {
      return v._seconds * 1000 + Math.round((v._nanoseconds || 0) / 1e6);
    }
    if (typeof v.seconds === "number") {
      return v.seconds * 1000 + Math.round((v.nanoseconds || 0) / 1e6);
    }
    if (typeof v.toDate === "function") {
      return v.toDate().getTime();
    }
  }

  return undefined;
}

/** ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÅ‡∏ö‡∏ö 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á */
function fmtDate(v?: number | string) {
  const ms = tsToMillis(v);
  if (!ms) return "-";
  return new Date(ms).toLocaleString("th-TH", {
    year: "numeric",
    month: "short",
    day: "2-digit",
    hour: "2-digit",
    minute: "2-digit",
    hour12: false,
  });
}

const squash = (v: any) => String(v ?? "").replace(/\s+/g, " ").trim();

function normalizeOne(x: any): PermitRow | null {
  console.log("üîç Raw data sample:", x);

  const rid = squash(x?.rid || x?.requester?.rid || x?.docId || x?.id || "");
  if (!rid) return null;

  const requesterName =
    squash(x?.requester?.fullname || x?.requester?.name || x?.employee || x?.contractorName || "") ||
    undefined;
  const company = squash(x?.requester?.company || x?.company || "");
  const jobType = squash(x?.work?.type || x?.work?.location?.type || x?.jobType || x?.type || "");

  const createdAt =
    tsToMillis(x?.createdAt) ??
    tsToMillis(x?.created_at) ??
    tsToMillis(x?.created) ??
    undefined;
  const updatedAt = tsToMillis(x?.updatedAt) ?? tsToMillis(x?.updated_at) ?? undefined;
  const approvedAt =
    tsToMillis(x?.approvedAt) ?? tsToMillis(x?.decision?.decidedAt) ?? undefined;
  const rejectedAt =
    tsToMillis(x?.rejectedAt) ?? tsToMillis(x?.decision?.decidedAt) ?? undefined;

  const status = squash(x?.status || x?.decision?.status || "pending");
  console.log(`üîÑ Status mapping for ${rid}:`, x?.status, "‚Üí", status);

  return { rid, requesterName, company, jobType, createdAt, updatedAt, approvedAt, rejectedAt, status };
}

function normalizeStatus(input?: string): "approved" | "rejected" | "pending" {
  const s = String(input || "").toLowerCase();
  console.log("üîÑ Status normalization:", input, "‚Üí", s);

  if (!s) return "pending";

  if (s === "‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥" || s.includes("‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥")) return "pending";
  if (s.includes("pending") || s.includes("waiting") || s.includes("‡∏£‡∏≠") || s.includes("submitted"))
    return "pending";

  if (s.includes("approve") || s.includes("‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥") || s === "approved" || s === "accept")
    return "approved";
  if (s.includes("reject") || s.includes("‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò") || s === "rejected" || s === "deny")
    return "rejected";

  return "pending";
}

// ---------- Fetch ‡πÅ‡∏•‡∏∞ Hydrate ----------
async function fetchRequests(options: { status?: string; limit?: number; signal?: AbortSignal } = {}): Promise<PermitRow[]> {
  const url = getListUrl();
  const key = getApproverKey();
  const requester = getRequesterEmail();

  console.log("üîß Config check:", {
    url: url ? "‚úÖ ‡∏°‡∏µ" : "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ",
    key: key ? "‚úÖ ‡∏°‡∏µ" : "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ",
    requester: requester ? "‚úÖ ‡∏°‡∏µ" : "‚ö†Ô∏è ‡∏ß‡πà‡∏≤‡∏á",
    fullUrl: url,
    keyLength: key?.length,
  });

  if (!url || !key) {
    throw new Error(
      "LIST URL ‡∏´‡∏£‡∏∑‡∏≠ approver_key ‡∏ß‡πà‡∏≤‡∏á - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö environment variables ‡∏´‡∏£‡∏∑‡∏≠ localStorage"
    );
  }

  const u = new URL(withKeyQuery(url, key, requester));
  u.searchParams.set("limit", String(options.limit || 300));
  if (options.status && options.status !== "all") {
    u.searchParams.set("status", options.status);
  }

  console.log("üì° Fetching from:", u.toString().replace(key, "KEY_HIDDEN"));

  let json: any | undefined;
  let method = "unknown";

  try {
    // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° POST ‡∏Å‡πà‡∏≠‡∏ô ‡∏û‡∏£‡πâ‡∏≠‡∏° headers
    method = "POST";
    const res = await fetch(url, {
      method: "POST",
      headers: buildHeaders(key, requester),
      body: JSON.stringify({
        key,
        requester,
        status: options.status === "all" ? undefined : options.status,
        sort: "latest",
        page: 1,
        pageSize: options.limit || 300,
      }),
      signal: options.signal,
    });

    console.log("üì° POST response:", res.status, res.statusText);

    if (res.ok) {
      json = await res.json();
    } else {
      // ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‚Üí ‡∏•‡∏≠‡∏á GET
      method = "GET";
      console.log("‚ö†Ô∏è POST failed, trying GET...");
      const res2 = await fetch(u.toString(), { signal: options.signal });
      console.log("üì° GET response:", res2.status, res2.statusText);
      if (!res2.ok) throw new Error(`HTTP ${res2.status}`);
      json = await res2.json();
    }
  } catch {
    // ‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏π‡πà‡∏•‡πâ‡∏° ‚Üí GET fallback
    method = "GET (fallback)";
    console.log("‚ö†Ô∏è All methods failed, trying GET fallback...");
    const res2 = await fetch(u.toString(), { signal: options.signal });
    console.log("üì° GET fallback response:", res2.status, res2.statusText);
    if (!res2.ok) throw new Error(`HTTP ${res2.status} - ${res2.statusText}`);
    json = await res2.json();
  }

  console.log("üì¶ Raw JSON structure:", {
    method,
    isArray: Array.isArray(json),
    hasData: !!json?.data,
    hasItems: !!json?.items,
    keys: Object.keys(json || {}),
    dataKeys: json?.data ? Object.keys(json.data) : null,
  });

  const rawItems: any[] = Array.isArray(json)
    ? json
    : Array.isArray(json?.data)
    ? json.data
    : Array.isArray(json?.items)
    ? json.items
    : Array.isArray(json?.data?.items)
    ? json.data.items
    : Array.isArray(json?.results)
    ? json.results
    : [];

  console.log("üìä Found items:", rawItems.length);
  if (rawItems.length > 0) {
    console.log("üìã Sample item:", rawItems[0]);
  }

  const normalized = rawItems.map(normalizeOne).filter(Boolean) as PermitRow[];
  console.log("‚úÖ Normalized items:", normalized.length);

  return normalized;
}

async function hydrateRowsWithDetails(
  rows: PermitRow[],
  options: { signal?: AbortSignal; concurrency?: number } = {}
): Promise<PermitRow[]> {
  const detailsUrl = getDetailsUrl();
  const key = getApproverKey();
  const requester = getRequesterEmail();
  if (!detailsUrl || !key || rows.length === 0) return rows;

  console.log("üíß Starting hydration for", rows.length, "rows");

  const out = [...rows];
  const limit = options.concurrency || 5;
  let cursor = 0;

  async function fetchOne(idx: number) {
    const r = out[idx];
    if (!r?.rid) return;

    try {
      const urlWithQuery = withKeyQuery(detailsUrl, key, requester);
      const u = new URL(urlWithQuery);
      u.searchParams.set("rid", r.rid);

      // details ‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏ç‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö GET ‚Üí ‡πÅ‡∏ô‡∏ö header ‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏î‡πà‡∏≤‡∏ô
      const res = await fetch(u.toString(), {
        method: "GET",
        headers: buildHeaders(key, requester),
        signal: options.signal,
      });
      if (!res.ok) throw new Error(`HTTP ${res.status}`);
      const j = await res.json();
      const x = j?.data?.request || j?.data || j?.request || j?.item || j;

      const requesterName =
        x?.requester?.fullname ?? x?.requester?.name ?? x?.employee ?? x?.contractorName ?? r.requesterName;
      const company = x?.requester?.company ?? x?.company ?? r.company;
      const jobType =
        x?.work?.type ?? x?.work?.location?.type ?? x?.jobType ?? r.jobType;

      out[idx] = { ...r, requesterName, company, jobType };
      console.log("üíß Hydrated:", r.rid, "‚Üí", { requesterName, company, jobType });
    } catch (error) {
      console.warn("‚ö†Ô∏è Hydration failed for", r.rid, ":", error);
    }
  }

  async function worker() {
    while (cursor < out.length) {
      const i = cursor++;
      await fetchOne(i);
    }
  }
  await Promise.all(Array.from({ length: limit }, worker));
  console.log("‚úÖ Hydration complete");
  return out;
}

// ---------- Export CSV ----------
function exportCsv(filename: string, rows: PermitRow[]) {
  const headers = ["RID", "‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡πà‡∏ô", "‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó", "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏á‡∏≤‡∏ô", "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡πà‡∏ô", "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï"];
  const esc = (x: any) => `"${String(x ?? "").replace(/"/g, '""')}"`;
  const lines = [headers.join(",")];

  for (const r of rows) {
    lines.push(
      [
        esc(r.rid),
        esc(r.requesterName ?? ""),
        esc(r.company ?? ""),
        esc(r.jobType ?? ""),
        esc(r.status ?? ""),
        esc(fmtDate(r.createdAt)),
        esc(fmtDate(r.updatedAt)),
      ].join(",")
    );
  }

  const csvWithBom = "\uFEFF" + lines.join("\n");
  const blob = new Blob([csvWithBom], { type: "text/csv;charset=utf-8;" });
  const url = URL.createObjectURL(blob);
  const a = document.createElement("a");
  a.href = url;
  a.download = filename;
  document.body.appendChild(a);
  a.click();
  a.remove();
  URL.revokeObjectURL(url);
}

function StatusChip({ value }: { value?: string }) {
  const val = normalizeStatus(value);
  const label =
    val === "approved" ? "‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥" : val === "rejected" ? "‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥" : "‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥";
  const color = val === "approved" ? "success" : val === "rejected" ? "error" : "warning";
  return <Chip label={label} color={color as any} variant="filled" size="small" />;
}

export default function Approvals() {
  const [rows, setRows] = useState<PermitRow[]>([]);
  const [loading, setLoading] = useState(true);
  const [hydrating, setHydrating] = useState(false);
  const [error, setError] = useState<string>("");
  const [debugMode, setDebugMode] = useState(false);

  const [q, setQ] = useState("");
  const [statusFilter, setStatusFilter] =
    useState<"all" | "pending" | "approved" | "rejected">("pending");

  // ‡∏≠‡πà‡∏≤‡∏ô‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏™‡∏î
  const live = useAuthzLive() ?? {};
  const canViewApprovals =
    isSuperadmin(live.role) ||
    hasCap(live.caps, "approve_requests", live.role) ||
    hasCap(live.caps, "review_requests", live.role) ||
    hasCap(live.caps, "view_permits", live.role) ||
    hasCap(live.caps, "view_all", live.role);

  const canExport =
    isSuperadmin(live.role) ||
    hasCap(live.caps, "export", live.role) ||
    hasCap(live.caps, "view_reports", live.role);

  // ‡∏Å‡∏±‡∏ô setState ‡∏´‡∏•‡∏±‡∏á unmount / ‡∏Å‡∏±‡∏ô StrictMode
  const aliveRef = useRef(false);
  useEffect(() => {
    aliveRef.current = true;
    return () => {
      aliveRef.current = false;
    };
  }, []);

  async function load(signal?: AbortSignal) {
    setError("");
    setLoading(true);
    console.log("üöÄ Starting load process...");

    try {
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå ‡πÑ‡∏°‡πà‡∏¢‡∏¥‡∏á API ‡πÅ‡∏ï‡πà‡∏õ‡∏•‡πà‡∏≠‡∏¢‡πÉ‡∏´‡πâ CapBlock ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡πâ‡∏≤‡∏¢‡πÅ‡∏ó‡∏ô
      if (!canViewApprovals) {
        console.warn("[Approvals] skip fetch: no permission");
        setRows([]);
        return;
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö config ‡∏Å‡πà‡∏≠‡∏ô
      const url = getListUrl();
      const key = getApproverKey();

      if (!url || !key) {
        throw new Error(
          `‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö:\n` +
            `- LIST URL: ${url ? "‚úÖ" : "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö"}\n` +
            `- APPROVER KEY: ${key ? "‚úÖ" : "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö"}\n\n` +
            `‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:\n` +
            `1. Environment variables (VITE_LIST_REQUESTS_ADMIN_URL, VITE_APPROVER_KEY)\n` +
            `2. localStorage (list_url, approver_key)`
        );
      }

      // P1: ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      console.log("üì° Fetching all requests...");
      const list = await fetchRequests({ status: undefined, limit: 500, signal });
      if (!aliveRef.current) return;

      console.log("üìä Received data:", {
        total: list.length,
        statuses: [...new Set(list.map((r) => r.status))],
        pendingCount: list.filter((r) => normalizeStatus(r.status) === "pending").length,
        approvedCount: list.filter((r) => normalizeStatus(r.status) === "approved").length,
        rejectedCount: list.filter((r) => normalizeStatus(r.status) === "rejected").length,
      });

      list.sort(
        (a, b) =>
          (tsToMillis(b.updatedAt) || tsToMillis(b.createdAt) || 0) -
          (tsToMillis(a.updatedAt) || tsToMillis(a.createdAt) || 0)
      );
      setRows(list);

      // P2: ‡πÄ‡∏ï‡∏¥‡∏°‡∏î‡∏µ‡πÄ‡∏ó‡∏• (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏ß‡πà‡∏≤‡∏á)
      const needHydrate = list.some((r) => !r.requesterName || !r.jobType || r.jobType === "-");

      console.log("üíß Hydration needed:", needHydrate);

      if (needHydrate) {
        setHydrating(true);
        const hydrated = await hydrateRowsWithDetails(list, { signal, concurrency: 5 });
        if (!aliveRef.current) return;

        hydrated.sort(
          (a, b) =>
            (tsToMillis(b.updatedAt) || tsToMillis(b.createdAt) || 0) -
            (tsToMillis(a.updatedAt) || tsToMillis(a.createdAt) || 0)
        );
        setRows(hydrated);
      }

      console.log("‚úÖ Load process complete");
    } catch (e: any) {
      const msg = (e?.message || "").toString();
      console.error("‚ùå Load error:", e);

      if (e?.name === "AbortError" || /abort/i.test(msg)) {
        console.debug("[Approvals] aborted");
      } else if (aliveRef.current) {
        setError(msg || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
      }
    } finally {
      if (aliveRef.current) {
        setLoading(false);
        setHydrating(false);
      }
    }
  }

  useEffect(() => {
    const ac = new AbortController();
    load(ac.signal);
    return () => ac.abort();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [canViewApprovals]);

  // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÇ‡∏ä‡∏ß‡πå‡∏ö‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏£‡∏≠‡∏á
  const counts = useMemo(() => {
    const c = { all: rows.length, pending: 0, approved: 0, rejected: 0 } as {
      all: number;
      pending: number;
      approved: number;
      rejected: number;
    };
    for (const r of rows) {
      const normalized = normalizeStatus(r.status);
      c[normalized]++;
    }
    console.log("üìä Status counts:", c);
    return c;
  }, [rows]);

  // ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á + ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
  const filtered = useMemo(() => {
    const term = q.trim().toLowerCase();
    const result = (rows || [])
      .filter((r) => (statusFilter === "all" ? true : normalizeStatus(r.status) === statusFilter))
      .filter((r) => {
        if (!term) return true;
        const name = (r.requesterName || r.company || "").toLowerCase();
        const type = (r.jobType || "").toLowerCase();
        return r.rid.toLowerCase().includes(term) || name.includes(term) || type.includes(term);
      });

    console.log("üîç Filtered results:", {
      statusFilter,
      searchTerm: term,
      totalRows: rows.length,
      filteredCount: result.length,
    });

    return result;
  }, [rows, q, statusFilter]);

  const isSuper = isSuperadmin(live.role);

  return (
    <Box>
      <Stack direction="row" alignItems="center" justifyContent="space-between" sx={{ mb: 2 }}>
        <Box>
          <Typography variant="h6" fontWeight={800}>
            Approvals (‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥)
          </Typography>
        </Box>
        <Stack direction="row" spacing={1}>
          {/* üêû ‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏µ‡∏ö‡∏±‡∏Å‡πÄ‡∏´‡πá‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞ superadmin */}
          {isSuper && (
            <IconButton
              size="small"
              onClick={() => setDebugMode(!debugMode)}
              color={debugMode ? "primary" : "default"}
            >
              <BugReportIcon />
            </IconButton>
          )}
          <CapButton
            anyOf={["export", "view_reports"]}
            variant="outlined"
            size="small"
            onClick={() =>
              exportCsv(`approvals_${new Date().toISOString().slice(0, 10)}.csv`, filtered)
            }
            disabled={!canExport}
          >
            Export CSV
          </CapButton>
          <Button
            variant="contained"
            size="small"
            onClick={() => {
              const ac = new AbortController();
              load(ac.signal);
            }}
          >
            Refresh
          </Button>
        </Stack>
      </Stack>

      {/* ‡∏ó‡∏±‡πâ‡∏á‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏ñ‡∏π‡∏Å‡∏Å‡∏±‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏î‡∏π/‡∏£‡∏µ‡∏ß‡∏¥‡∏ß/‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ */}
      <CapBlock
        anyOf={["approve_requests", "review_requests", "view_permits", "view_all"]}
        deniedText="‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏Ç‡∏≠ (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå approve/review ‡∏´‡∏£‡∏∑‡∏≠ view_permits)"
      >
        {/* Debug Panel ‚Üí ‡πÄ‡∏´‡πá‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞ superadmin ‡πÅ‡∏•‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô */}
        {debugMode && isSuper && (
          <Alert severity="info" sx={{ mb: 2 }}>
            <Typography variant="caption" component="div">
              üìä <strong>Debug Info:</strong>
              <br />
              ‚Ä¢ Total Rows: {rows.length}
              <br />
              ‚Ä¢ Filtered: {filtered.length}
              <br />
              ‚Ä¢ Counts: P:{counts.pending} A:{counts.approved} R:{counts.rejected}
              <br />
              ‚Ä¢ Status Filter: {statusFilter}
              <br />
              ‚Ä¢ List URL: {getListUrl() ? "‚úÖ" : "‚ùå"}
              <br />
              ‚Ä¢ Approver Key: {getApproverKey() ? "‚úÖ" : "‚ùå"}
              <br />
              ‚Ä¢ Requester: {getRequesterEmail() ? "‚úÖ" : "‚ö†Ô∏è"}
              <br />
              ‚Ä¢ Search: "{q}"
            </Typography>
          </Alert>
        )}

        <Paper variant="outlined" sx={{ p: 2, mb: 2 }}>
          <Stack
            direction={{ xs: "column", sm: "row" }}
            gap={1}
            alignItems={{ xs: "stretch", sm: "center" }}
          >
            <TextField
              fullWidth
              size="small"
              placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: RID / ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡πà‡∏ô / ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏á‡∏≤‡∏ô"
              value={q}
              onChange={(e) => setQ(e.target.value)}
              InputProps={{
                startAdornment: (
                  <InputAdornment position="start">
                    <SearchRoundedIcon />
                  </InputAdornment>
                ),
              }}
            />
            <Divider flexItem orientation="vertical" sx={{ display: { xs: "none", sm: "block" } }} />
            <ToggleButtonGroup
              exclusive
              size="small"
              value={statusFilter}
              onChange={(_, v) => v && setStatusFilter(v)}
            >
              <ToggleButton value="pending">
                <Badge color="warning" badgeContent={counts.pending} max={999}>
                  Pending
                </Badge>
              </ToggleButton>
              <ToggleButton value="approved">
                <Badge color="success" badgeContent={counts.approved} max={999}>
                  Approved
                </Badge>
              </ToggleButton>
              <ToggleButton value="rejected">
                <Badge color="error" badgeContent={counts.rejected} max={999}>
                  Rejected
                </Badge>
              </ToggleButton>
              <ToggleButton value="all">
                <Badge color="primary" badgeContent={counts.all} max={999}>
                  All
                </Badge>
              </ToggleButton>
            </ToggleButtonGroup>
          </Stack>
        </Paper>

        <Paper variant="outlined">
          {(loading || hydrating) && <LinearProgress />}

          {!loading && error && (
            <Box sx={{ p: 2, color: "error.main", whiteSpace: "pre-wrap" }}>
              ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {error}
            </Box>
          )}

          {!loading && !error && filtered.length === 0 && (
            <Box sx={{ p: 2, color: "text.secondary" }}>
              {rows.length > 0 && statusFilter === "pending"
                ? `‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ '‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥' (‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${rows.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ - ‡∏•‡∏≠‡∏á‡∏Å‡∏î Approved/Rejected/All)`
                : rows.length > 0
                ? `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á "${statusFilter}" ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ "${q}"`
                : "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏î‡πÜ - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API"}
            </Box>
          )}

          {!loading && !error && filtered.length > 0 && (
            <TableContainer>
              <Table size="small">
                <TableHead>
                  <TableRow>
                    <TableCell>RID</TableCell>
                    <TableCell>‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡πà‡∏ô</TableCell>
                    <TableCell>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏á‡∏≤‡∏ô</TableCell>
                    <TableCell>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</TableCell>
                    <TableCell>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡πà‡∏ô/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï</TableCell>
                    <TableCell align="right">‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {filtered.map((r) => (
                    <TableRow key={r.rid} hover>
                      <TableCell sx={{ fontWeight: 700 }}>{r.rid}</TableCell>
                      <TableCell>{r.requesterName || r.company || "-"}</TableCell>
                      <TableCell>{r.jobType || "-"}</TableCell>
                      <TableCell>
                        <StatusChip value={r.status} />
                      </TableCell>
                      <TableCell>{fmtDate(r.updatedAt || r.createdAt)}</TableCell>
                      <TableCell align="right">
                        <Stack direction="row" spacing={1} justifyContent="flex-end">
                          <Tooltip title="‡πÄ‡∏õ‡∏¥‡∏î‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î">
                            <IconButton
                              component={Link as any}
                              to={`/admin/permits/${encodeURIComponent(r.rid)}`}
                              size="small"
                            >
                              <OpenInNewRoundedIcon fontSize="small" />
                            </IconButton>
                          </Tooltip>
                        </Stack>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </TableContainer>
          )}
        </Paper>
      </CapBlock>
    </Box>
  );
}
