// ======================================================================
// File: web/src/components/DailyView.tsx
// Purpose: ‡πÅ‡∏™‡∏î‡∏á‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö 3 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå (Kanban)
// Updated: 2025-10-13 (Hotfix: build-errors)
// Changes (hotfix):
//  - MUI Grid: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô item/xs/md ‚Üí size (API ‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏≠‡∏á MUI v6/v7)
//  - ‡πÄ‡∏û‡∏¥‡πà‡∏° safeFormatTimestamp() ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö string | Date | Firestore TS
//  - normalize() ‡πÅ‡∏õ‡∏•‡∏á WorkItem ‚Üí DailyWorkItem ‡∏Å‡πà‡∏≠‡∏ô setWorks (‡πÅ‡∏Å‡πâ TS2322)
//  - ‡∏Ñ‡∏á UI/‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
// ======================================================================

import { useState, useEffect } from "react";
import {
  Box,
  Grid,
  Paper,
  Typography,
  Button,
  Chip,
  CircularProgress,
  Alert
} from "@mui/material";
import AccessTimeIcon from "@mui/icons-material/AccessTime";
import LocationOnIcon from "@mui/icons-material/LocationOn";
import PersonIcon from "@mui/icons-material/Person";

// ‚òÖ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ Modals
import CheckInModal from "./CheckInModal";
import CheckOutModal from "./CheckOutModal";

// ‚òÖ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ Services ‡πÅ‡∏•‡∏∞ Types
import {
  getDailyWorkByDate,
  checkInRequest,
  checkOutRequest,
  formatTimestamp, // ‡∏à‡∏∞‡∏´‡∏∏‡πâ‡∏°‡∏î‡πâ‡∏ß‡∏¢ safeFormatTimestamp ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á TS2345
} from "../services/dailyOperationsService";
import type { DailyViewProps } from "../types/dailywork.types";
import type { DailyWorkItem } from "../types/index";

// ---------- ‡∏ï‡∏±‡∏ß‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏•‡πá‡∏Å ‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏±‡∏ô TypeScript ‡∏ä‡∏ô‡∏Å‡∏±‡∏ö formatTimestamp ----------
function safeFormatTimestamp(
  v: any // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö string | Date | { _seconds: number; _nanoseconds: number }
): string {
  try {
    // ‡∏ñ‡πâ‡∏≤ service ‡∏£‡∏±‡∏ö union ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡πá‡∏à‡∏∞‡πÇ‡∏≠‡πÄ‡∏Ñ
    return formatTimestamp(v as any);
  } catch {
    // ‡∏Å‡∏±‡∏ô‡πÑ‡∏ß‡πâ‡∏Å‡∏£‡∏ì‡∏µ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÉ‡∏ô service ‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Firestore TS
    if (typeof v === "string") {
      const d = new Date(v);
      return isNaN(d.getTime()) ? v : d.toLocaleString();
    }
    if (v && typeof v._seconds === "number") {
      const d = new Date(v._seconds * 1000);
      return d.toLocaleString();
    }
    return "";
  }
}

// ---------- ‡πÅ‡∏õ‡∏•‡∏á WorkItem ‚Üí DailyWorkItem ‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏π‡∏õ ----------
function normalize(item: any): DailyWorkItem {
  return {
    // ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà UI ‡πÉ‡∏ä‡πâ
    rid: item.rid ?? item.id ?? "",
    contractorName: item.contractorName ?? item.contractor?.name ?? "-",
    permitType: item.permitType ?? item.type ?? "-",
    area: item.area ?? item.location ?? "-",
    startTime: item.startTime ?? item.scheduledStartAt ?? "",
    endTime: item.endTime ?? item.scheduledEndAt ?? "",
    dailyStatus: item.dailyStatus ?? item.status ?? "scheduled",

    // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô/‡πÄ‡∏≠‡∏≤‡∏ó‡πå (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏¥‡∏•‡∏î‡πå)
    checkedInAt: item.checkedInAt ?? item.checkInAt ?? item.checked_in_at ?? undefined,
    checkedOutAt: item.checkedOutAt ?? item.checkOutAt ?? item.checked_out_at ?? undefined,
    checkInNotes: item.checkInNotes ?? item.notesIn ?? item.check_in_notes ?? undefined,
    checkOutNotes: item.checkOutNotes ?? item.notesOut ?? item.check_out_notes ?? undefined,

    // ‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏ó‡∏µ‡πà‡πÉ‡∏ô type ‡πÄ‡∏î‡∏¥‡∏°‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô required ‚Äî ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÑ‡∏ß‡πâ
    workDate: item.workDate ?? item.date ?? undefined,
    status: item.status ?? undefined,
    createdAt: item.createdAt ?? undefined,
    updatedAt: item.updatedAt ?? undefined,
  } as DailyWorkItem;
}

export default function DailyView({ date, onCheckIn, onCheckOut }: DailyViewProps) {
  // ========== State Management ==========

  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [works, setWorks] = useState<DailyWorkItem[]>([]);

  // Modal states
  const [checkInOpen, setCheckInOpen] = useState(false);
  const [checkOutOpen, setCheckOutOpen] = useState(false);
  const [selectedWork, setSelectedWork] = useState<DailyWorkItem | null>(null);

  // ========== Load Data ==========

  useEffect(() => {
    loadWorks();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [date]);

  async function loadWorks() {
    setLoading(true);
    setError(null);

    try {
      // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏à‡∏£‡∏¥‡∏á - ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô format YYYY-MM-DD
      const dateStr = date.toISOString().split("T")[0]; // "2025-10-13"

      const result = await getDailyWorkByDate(dateStr);

      // ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á 3 ‡∏Å‡∏•‡∏∏‡πà‡∏° ‡πÅ‡∏•‡πâ‡∏ß normalize ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô DailyWorkItem ‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô
      const allWorks: DailyWorkItem[] = [
        ...result.scheduled.map(normalize),
        ...result.checkedIn.map(normalize),
        ...result.checkedOut.map(normalize),
      ];

      setWorks(allWorks);

      console.log(`üìÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${dateStr} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:`, {
        scheduled: result.scheduled.length,
        checkedIn: result.checkedIn.length,
        checkedOut: result.checkedOut.length,
        total: allWorks.length,
      });
    } catch (e: any) {
      setError(e?.message || "‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      console.error("‚ùå Error loading works:", e);
    } finally {
      setLoading(false);
    }
  }

  // ========== Modal Handlers ==========

  const handleCheckInClick = (rid: string) => {
    const work = works.find((w) => w.rid === rid);
    if (work) {
      setSelectedWork(work);
      setCheckInOpen(true);
    }
  };

  const handleCheckInConfirm = async (rid: string, notes: string) => {
    console.log("‚úÖ Check In Request:", { rid, notes, timestamp: new Date().toISOString() });

    try {
      await checkInRequest(rid, notes);
      console.log("‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      await loadWorks();
      setCheckInOpen(false);
      setSelectedWork(null);
      onCheckIn?.(rid);
    } catch (e: any) {
      console.error("‚ùå Check-in error:", e);
      throw e;
    }
  };

  const handleCheckOutClick = (rid: string) => {
    const work = works.find((w) => w.rid === rid);
    if (work) {
      setSelectedWork(work);
      setCheckOutOpen(true);
    }
  };

  const handleCheckOutConfirm = async (rid: string, notes: string) => {
    console.log("üö™ Check Out Request:", { rid, notes, timestamp: new Date().toISOString() });

    try {
      await checkOutRequest(rid, notes);
      console.log("‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏≠‡∏≤‡∏ó‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      await loadWorks();
      setCheckOutOpen(false);
      setSelectedWork(null);
      onCheckOut?.(rid);
    } catch (e: any) {
      console.error("‚ùå Check-out error:", e);
      throw e;
    }
  };

  // ========== Filter by Status ==========

  const scheduled = works.filter((w) => w.dailyStatus === "scheduled");
  const checkedIn = works.filter((w) => w.dailyStatus === "checked-in");
  const checkedOut = works.filter((w) => w.dailyStatus === "checked-out");

  // ========== Loading & Error States ==========

  if (loading) {
    return (
      <Box sx={{ display: "flex", justifyContent: "center", p: 4 }}>
        <CircularProgress />
      </Box>
    );
  }

  if (error) {
    return (
      <Alert severity="error" sx={{ mb: 2 }}>
        {error}
      </Alert>
    );
  }

  // ========== Render ==========

  return (
    <>
      <Grid container spacing={2}>
        {/* Column 1: ‡∏à‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤ */}
        <Grid size={{ xs: 12, md: 4 }}>
          <WorkColumn
            title="üü† ‡∏à‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤"
            count={scheduled.length}
            color="#ff9800"
            items={scheduled}
            actionLabel="‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô"
            onAction={handleCheckInClick}
          />
        </Grid>

        {/* Column 2: ‡πÄ‡∏Ç‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß */}
        <Grid size={{ xs: 12, md: 4 }}>
          <WorkColumn
            title="üü¢ ‡πÄ‡∏Ç‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß"
            count={checkedIn.length}
            color="#4caf50"
            items={checkedIn}
            actionLabel="‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏≠‡∏≤‡∏ó‡πå"
            onAction={handleCheckOutClick}
          />
        </Grid>

        {/* Column 3: ‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß */}
        <Grid size={{ xs: 12, md: 4 }}>
          <WorkColumn
            title="üîµ ‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß"
            count={checkedOut.length}
            color="#2196f3"
            items={checkedOut}
            actionLabel={null}
            onAction={undefined}
          />
        </Grid>
      </Grid>

      {/* ========== Modals ========== */}

      <CheckInModal
        open={checkInOpen}
        work={selectedWork}
        onClose={() => {
          setCheckInOpen(false);
          setSelectedWork(null);
        }}
        onConfirm={handleCheckInConfirm}
      />

      <CheckOutModal
        open={checkOutOpen}
        work={selectedWork}
        onClose={() => {
          setCheckOutOpen(false);
          setSelectedWork(null);
        }}
        onConfirm={handleCheckOutConfirm}
      />
    </>
  );
}

// ========== Sub-Components ==========

interface WorkColumnProps {
  title: string;
  count: number;
  color: string;
  items: DailyWorkItem[];
  actionLabel: string | null;
  onAction?: (rid: string) => void;
}

function WorkColumn({ title, count, color, items, actionLabel, onAction }: WorkColumnProps) {
  return (
    <Paper sx={{ p: 2, minHeight: 400, bgcolor: "#fafafa" }}>
      {/* Header */}
      <Box sx={{ mb: 2, display: "flex", alignItems: "center", gap: 1 }}>
        <Typography variant="h6" sx={{ fontWeight: 600 }}>
          {title}
        </Typography>
        <Chip label={count} size="small" sx={{ bgcolor: color, color: "#fff", fontWeight: 600 }} />
      </Box>

      {/* Items */}
      <Box sx={{ display: "flex", flexDirection: "column", gap: 2 }}>
        {items.length === 0 ? (
          <Typography variant="body2" color="text.secondary" sx={{ textAlign: "center", py: 4 }}>
            ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô
          </Typography>
        ) : (
          items.map((item) => (
            <WorkCard key={item.rid} item={item} actionLabel={actionLabel} onAction={onAction} />
          ))
        )}
      </Box>
    </Paper>
  );
}

interface WorkCardProps {
  item: DailyWorkItem;
  actionLabel: string | null;
  onAction?: (rid: string) => void;
}

function WorkCard({ item, actionLabel, onAction }: WorkCardProps) {
  const getBorderColor = () => {
    switch (item.dailyStatus) {
      case "scheduled":
        return "#ff9800";
      case "checked-in":
        return "#4caf50";
      case "checked-out":
        return "#2196f3";
      default:
        return "#9e9e9e";
    }
  };

  return (
    <Paper
      elevation={2}
      sx={{
        p: 2,
        bgcolor: "#fff",
        borderLeft: 4,
        borderColor: getBorderColor(),
        transition: "transform 0.2s, box-shadow 0.2s",
        "&:hover": {
          transform: "translateY(-2px)",
          boxShadow: 4,
        },
      }}
    >
      {/* RID */}
      <Typography variant="caption" color="text.secondary" sx={{ fontFamily: "monospace", display: "block" }}>
        {item.rid}
      </Typography>

      {/* ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏´‡∏°‡∏≤ */}
      <Typography variant="subtitle1" sx={{ fontWeight: 600, mt: 0.5 }}>
        <PersonIcon sx={{ fontSize: 16, mr: 0.5, verticalAlign: "middle" }} />
        {item.contractorName}
      </Typography>

      {/* ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏á‡∏≤‡∏ô */}
      <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
        {item.permitType}
      </Typography>

      {/* ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà */}
      <Typography variant="body2" color="text.secondary" sx={{ mt: 0.5 }}>
        <LocationOnIcon sx={{ fontSize: 14, mr: 0.5, verticalAlign: "middle" }} />
        {item.area}
      </Typography>

      {/* ‡πÄ‡∏ß‡∏•‡∏≤ */}
      <Typography variant="body2" color="text.secondary" sx={{ mt: 0.5 }}>
        <AccessTimeIcon sx={{ fontSize: 14, mr: 0.5, verticalAlign: "middle" }} />
        {item.startTime} - {item.endTime}
      </Typography>

      {/* üÜï ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) */}
      {item.checkedInAt && (
        <Box sx={{ mt: 1, p: 1, bgcolor: "#e8f5e9", borderRadius: 1 }}>
          <Typography variant="caption" color="success.dark" sx={{ display: "block" }}>
            ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô: {safeFormatTimestamp(item.checkedInAt)}
          </Typography>
          {item.checkInNotes && (
            <Typography variant="caption" color="text.secondary" sx={{ display: "block", mt: 0.5 }}>
              üí¨ {item.checkInNotes}
            </Typography>
          )}
        </Box>
      )}

      {/* üÜï ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏≠‡∏≤‡∏ó‡πå (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) */}
      {item.checkedOutAt && (
        <Box sx={{ mt: 1, p: 1, bgcolor: "#e3f2fd", borderRadius: 1 }}>
          <Typography variant="caption" color="primary.dark" sx={{ display: "block" }}>
            üîµ ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏≠‡∏≤‡∏ó‡πå: {safeFormatTimestamp(item.checkedOutAt)}
          </Typography>
          {item.checkOutNotes && (
            <Typography variant="caption" color="text.secondary" sx={{ display: "block", mt: 0.5 }}>
              üí¨ {item.checkOutNotes}
            </Typography>
          )}
        </Box>
      )}

      {/* Action Button */}
      {actionLabel && onAction && (
        <Button variant="contained" size="small" fullWidth sx={{ mt: 2 }} onClick={() => onAction(item.rid)}>
          {actionLabel}
        </Button>
      )}
    </Paper>
  );
}
