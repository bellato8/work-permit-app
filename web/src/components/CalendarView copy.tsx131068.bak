// ======================================================================
// File: web/src/components/CalendarView.tsx
// Purpose: แสดงงานประจำวันในรูปแบบปฏิทิน
// Updated: 2025-10-11 (Task 10: Integration Testing)
// Changes:
//  - แก้ Thai encoding ให้ถูกต้อง
//  - เพิ่ม TypeScript types
//  - ปรับปรุง calendar algorithm
//  - เพิ่ม accessibility
// ======================================================================

import { useState, useEffect } from "react";
import { 
  Box, 
  Paper, 
  Typography, 
  IconButton,
  Grid,
  Chip,
  CircularProgress,
  Alert
} from "@mui/material";
import ArrowBackIosNewIcon from "@mui/icons-material/ArrowBackIosNew";
import ArrowForwardIosIcon from "@mui/icons-material/ArrowForwardIos";

// ★ นำเข้า Types
import type { CalendarViewProps } from "../types/dailywork.types";
import type { CalendarDayData } from "../types/index";

export default function CalendarView({ onDateClick }: CalendarViewProps) {
  // ========== State Management ==========
  
  const [currentDate, setCurrentDate] = useState(new Date());
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [daysData, setDaysData] = useState<CalendarDayData[]>([]);

  const year = currentDate.getFullYear();
  const month = currentDate.getMonth();

  // ========== Load Data ==========
  
  useEffect(() => {
    loadCalendarData();
  }, [year, month]);

  async function loadCalendarData() {
    setLoading(true);
    setError(null);
    
    try {
      // TODO: Phase 2 - Replace with real API call
      // const result = await getCalendarView(year, month + 1);
      
      // Mock data สำหรับทดสอบ
      await new Promise(resolve => setTimeout(resolve, 500));
      
      setDaysData([
        { 
          date: "2025-10-10", 
          totalWorks: 10, 
          scheduled: 3, 
          checkedIn: 5, 
          checkedOut: 2 
        },
        { 
          date: "2025-10-11", 
          totalWorks: 8, 
          scheduled: 2, 
          checkedIn: 4, 
          checkedOut: 2 
        },
        { 
          date: "2025-10-12", 
          totalWorks: 5, 
          scheduled: 1, 
          checkedIn: 3, 
          checkedOut: 1 
        },
      ]);
    } catch (e: any) {
      setError(e?.message || "โหลดข้อมูลไม่สำเร็จ");
      console.error("Error loading calendar data:", e);
    } finally {
      setLoading(false);
    }
  }

  // ========== Navigation Handlers ==========
  
  const handlePrevMonth = () => {
    setCurrentDate(new Date(year, month - 1, 1));
  };

  const handleNextMonth = () => {
    setCurrentDate(new Date(year, month + 1, 1));
  };

  // ========== Formatting ==========
  
  const monthName = currentDate.toLocaleDateString("th-TH", { 
    year: "numeric", 
    month: "long" 
  });

  // ========== Calendar Algorithm ==========
  
  // คำนวณวันในเดือน
  const firstDay = new Date(year, month, 1).getDay(); // 0=อาทิตย์, 6=เสาร์
  const daysInMonth = new Date(year, month + 1, 0).getDate();
  
  // สร้าง grid ของปฏิทิน
  const weeks: (number | null)[][] = [];
  let currentWeek: (number | null)[] = new Array(firstDay).fill(null);
  
  for (let day = 1; day <= daysInMonth; day++) {
    currentWeek.push(day);
    if (currentWeek.length === 7) {
      weeks.push(currentWeek);
      currentWeek = [];
    }
  }
  
  // เติมช่องว่างท้ายสัปดาห์สุดท้าย
  if (currentWeek.length > 0) {
    while (currentWeek.length < 7) currentWeek.push(null);
    weeks.push(currentWeek);
  }

  // ========== Data Lookup ==========
  
  const getDataForDate = (day: number): CalendarDayData | null => {
    const dateStr = `${year}-${String(month + 1).padStart(2, "0")}-${String(day).padStart(2, "0")}`;
    return daysData.find(d => d.date === dateStr) || null;
  };

  // ========== Loading & Error States ==========
  
  if (loading) {
    return (
      <Box sx={{ display: "flex", justifyContent: "center", p: 4 }}>
        <CircularProgress />
      </Box>
    );
  }

  if (error) {
    return (
      <Alert severity="error" sx={{ mb: 2 }}>
        {error}
      </Alert>
    );
  }

  // ========== Render ==========
  
  return (
    <Paper sx={{ p: 3 }}>
      {/* ========== Header ========== */}
      <Box 
        sx={{ 
          display: "flex", 
          alignItems: "center", 
          justifyContent: "space-between", 
          mb: 3 
        }}
      >
        <IconButton 
          onClick={handlePrevMonth}
          aria-label="เดือนก่อนหน้า"
        >
          <ArrowBackIosNewIcon />
        </IconButton>
        
        <Typography variant="h5" sx={{ fontWeight: 600 }}>
          {monthName}
        </Typography>
        
        <IconButton 
          onClick={handleNextMonth}
          aria-label="เดือนถัดไป"
        >
          <ArrowForwardIosIcon />
        </IconButton>
      </Box>

      {/* ========== Day Names ========== */}
      <Grid container spacing={1} sx={{ mb: 1 }}>
        {["อา", "จ", "อ", "พ", "พฤ", "ศ", "ส"].map(day => (
          <Grid item xs key={day}>
            <Typography 
              variant="caption" 
              sx={{ 
                display: "block", 
                textAlign: "center", 
                fontWeight: 600,
                color: "text.secondary"
              }}
            >
              {day}
            </Typography>
          </Grid>
        ))}
      </Grid>

      {/* ========== Calendar Grid ========== */}
      <Box>
        {weeks.map((week, weekIdx) => (
          <Grid container spacing={1} key={weekIdx} sx={{ mb: 1 }}>
            {week.map((day, dayIdx) => {
              // ช่องว่าง
              if (day === null) {
                return (
                  <Grid item xs key={`empty-${dayIdx}`}>
                    <Box sx={{ height: 80 }} />
                  </Grid>
                );
              }

              const data = getDataForDate(day);
              const today = new Date();
              const isToday = 
                day === today.getDate() && 
                month === today.getMonth() && 
                year === today.getFullYear();

              return (
                <Grid item xs key={day}>
                  <Paper
                    elevation={isToday ? 4 : 1}
                    sx={{
                      p: 1,
                      height: 80,
                      cursor: data ? "pointer" : "default",
                      bgcolor: isToday ? "#e3f2fd" : "#fff",
                      border: isToday ? 2 : 0,
                      borderColor: "primary.main",
                      transition: "transform 0.2s, box-shadow 0.2s",
                      "&:hover": data ? { 
                        bgcolor: "#f5f5f5",
                        transform: "translateY(-2px)",
                        boxShadow: 3
                      } : {}
                    }}
                    onClick={() => {
                      if (data && onDateClick) {
                        onDateClick(new Date(year, month, day));
                      }
                    }}
                    role={data ? "button" : undefined}
                    tabIndex={data ? 0 : undefined}
                    aria-label={data ? `วันที่ ${day} มี ${data.totalWorks} งาน` : undefined}
                  >
                    {/* Day Number */}
                    <Typography 
                      variant="body2" 
                      sx={{ fontWeight: isToday ? 700 : 400 }}
                    >
                      {day}
                    </Typography>

                    {/* Work Count */}
                    {data && (
                      <Box sx={{ mt: 0.5 }}>
                        <Chip 
                          label={`${data.totalWorks} งาน`} 
                          size="small"
                          color="primary"
                          sx={{ fontSize: 10, height: 20 }}
                        />
                        
                        {/* Status Dots */}
                        <Box sx={{ display: "flex", gap: 0.5, mt: 0.5 }}>
                          {data.scheduled > 0 && (
                            <Box 
                              sx={{ 
                                width: 6, 
                                height: 6, 
                                borderRadius: "50%", 
                                bgcolor: "#ff9800" 
                              }}
                              title={`จะเข้า ${data.scheduled} งาน`}
                            />
                          )}
                          {data.checkedIn > 0 && (
                            <Box 
                              sx={{ 
                                width: 6, 
                                height: 6, 
                                borderRadius: "50%", 
                                bgcolor: "#4caf50" 
                              }}
                              title={`เข้าแล้ว ${data.checkedIn} งาน`}
                            />
                          )}
                          {data.checkedOut > 0 && (
                            <Box 
                              sx={{ 
                                width: 6, 
                                height: 6, 
                                borderRadius: "50%", 
                                bgcolor: "#2196f3" 
                              }}
                              title={`ออกแล้ว ${data.checkedOut} งาน`}
                            />
                          )}
                        </Box>
                      </Box>
                    )}
                  </Paper>
                </Grid>
              );
            })}
          </Grid>
        ))}
      </Box>

      {/* ========== Legend ========== */}
      <Box 
        sx={{ 
          mt: 3, 
          display: "flex", 
          gap: 2, 
          justifyContent: "center",
          flexWrap: "wrap"
        }}
      >
        <Box sx={{ display: "flex", alignItems: "center", gap: 0.5 }}>
          <Box sx={{ width: 12, height: 12, borderRadius: "50%", bgcolor: "#ff9800" }} />
          <Typography variant="caption">จะเข้า</Typography>
        </Box>
        <Box sx={{ display: "flex", alignItems: "center", gap: 0.5 }}>
          <Box sx={{ width: 12, height: 12, borderRadius: "50%", bgcolor: "#4caf50" }} />
          <Typography variant="caption">เข้าแล้ว</Typography>
        </Box>
        <Box sx={{ display: "flex", alignItems: "center", gap: 0.5 }}>
          <Box sx={{ width: 12, height: 12, borderRadius: "50%", bgcolor: "#2196f3" }} />
          <Typography variant="caption">ออกแล้ว</Typography>
        </Box>
      </Box>
    </Paper>
  );
}
